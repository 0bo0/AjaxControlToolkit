/// <reference name="MicrosoftAjax.js"/>
/// <reference path="..\..\..\..\..\AtlasUnit\Common\Pages\AtlasUnit.js" />

Type.registerNamespace("AtlasScript.Test");

AtlasScript.Test.ErrorTest = function() {
    // This test should be first in this file, to minimize issues with line numbers changing when
    // tests are added.
    this.testPopStackFrameLive = function() {
        // Use the live value of the stack field generated by FireFox.  In other browsers,
        // e.stack will be undefined.
        var e = AtlasScript.Test.ErrorTestHelper.createError();

        // Test only applies on FireFox, where e.stack is defined
        if (e.stack !== undefined && e.stack !== null) {
            // Only verify last stack frame on Firefox 2.  It is nondeterministic in Firefox 3.        
            //var verifyLastStackFrame = (Sys.Browser.agent == Sys.Browser.Firefox && Sys.Browser.version > 2);
            //this._testPopStackFrame(e, verifyLastStackFrame);
            // do not verify the last stackframe anymore, it changed with test updates
            this._testPopStackFrame(e, false);
        }
    }

    this.testPopStackFrameMock = function() {
        var e = new Error();

        // Manually assign values to the lineNumber, fileName, and stack fields.
        // The values are a copy of the values assigned by FireFox. This allows
        // us to test the stack parsing and manipulation on browsers other than
        // FireFox.
        e.lineNumber = 12;
        e.fileName = "http://localhost/AtlasUnit/AtlasScript/Test/ErrorTestHelper.js?guid=3f7ad3e5-f2c5-42d3-9a54-9b4656289320";
        e.stack = 'Error("test message")@:0\n\
()@http://localhost/AtlasUnit/AtlasScript/Test/ErrorTestHelper.js?guid=3f7ad3e5-f2c5-42d3-9a54-9b4656289320:12\n\
()@http://localhost/AtlasUnit/AtlasScript/Test/ErrorTestHelper.js?guid=3f7ad3e5-f2c5-42d3-9a54-9b4656289320:9\n\
()@http://localhost/AtlasUnit/AtlasScript/Test/ErrorTest.js?guid=3828fc1a-4ba6-483e-b9d1-4b0313246fa5:12\n\
()@http://localhost/AtlasUnit/AtlasUnit.js?guid=b504b847-a2cf-4a44-882e-9e0c78dbaacc:104\n\
(false)@http://localhost/AtlasUnit/AtlasUnit.js?guid=b504b847-a2cf-4a44-882e-9e0c78dbaacc:75\n\
([object Object])@http://localhost/AtlasUnit/AtlasUnit.js?guid=b504b847-a2cf-4a44-882e-9e0c78dbaacc:284\n\
([object Object])@http://localhost/AtlasUnit/AtlasUnit.js?guid=b504b847-a2cf-4a44-882e-9e0c78dbaacc:51\n\
([object Object])@http://localhost/AtlasUnit/AtlasUnit.js?guid=b504b847-a2cf-4a44-882e-9e0c78dbaacc:165\n\
([object Object])@http://localhost/AtlasUnit/AtlasUnit.js?guid=b504b847-a2cf-4a44-882e-9e0c78dbaacc:165\n\
([object Object])@http://localhost/AtlasUnit/AtlasUnit.js?guid=b504b847-a2cf-4a44-882e-9e0c78dbaacc:165\n\
([object Object])@http://localhost/AtlasUnit/AtlasUnit.js?guid=b504b847-a2cf-4a44-882e-9e0c78dbaacc:165\n\
run([object Event])@http://localhost/AtlasUnit/AtlasUnitConsole.aspx?projectUrl=AtlasScript/AtlasScriptProject.xml:75\n\
@:0\n\
';

        this._testPopStackFrame(e, true);
    }

    this.testPopStackFrameStackDeleted = function() {
        var e = new Error();

        delete e.stack;
        // In Firefox 2.0.0.0 and older, "delete e.stack" causes the value of e.stack to be undefined.
        // In Firefox 2.0.0.1, "delete e.stack" causes the value of e.stack to be the empty string.
        // We want to explicitly test e.stack being undefined, so if it is not undefined we must manually set it.
        if (e.stack !== undefined) e.stack = undefined;

        // Cannot delete fileName or lineNumber fields in Firefox
        if (e.fileName) e.fileName = undefined;
        if (e.lineNumber) e.lineNumber = undefined;

        e.popStackFrame();

        AtlasUnit.Assert.isTrue(e.stack === undefined);
        AtlasUnit.Assert.isTrue(e.fileName === undefined);
        AtlasUnit.Assert.isTrue(e.lineNumber === undefined);
    }

    this.testPopStackFrameStackEmpty = function() {
        var e = new Error();
        e.stack = "";
        // Cannot delete fileName or lineNumber fields in FireFox
        if (e.fileName) e.fileName = undefined;
        if (e.lineNumber) e.lineNumber = undefined;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("", e.stack);
        AtlasUnit.Assert.isTrue(e.fileName === undefined);
        AtlasUnit.Assert.isTrue(e.lineNumber === undefined);
    }

    this.testPopStackFrameFileNameUndefined = function() {
        var e = new Error();
        e.stack = "test stack";
        // Cannot delete fileName or lineNumber fields in FireFox
        if (e.fileName) e.fileName = undefined;
        if (e.lineNumber) e.lineNumber = undefined;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("test stack", e.stack);
        AtlasUnit.Assert.isTrue(e.fileName === undefined);
        AtlasUnit.Assert.isTrue(e.lineNumber === undefined);
    }

    this.testPopStackFrameLineNumberUndefined = function() {
        var e = new Error();
        e.stack = "test stack";
        e.fileName = "TestFileName.js";
        // Cannot delete lineNumber fields in FireFox
        if (e.lineNumber) e.lineNumber = undefined;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("test stack", e.stack);
        AtlasUnit.Assert.areEqual("TestFileName.js", e.fileName);
        AtlasUnit.Assert.isTrue(e.lineNumber === undefined);
    }

    this.testPopStackFrameSingleFrameNotMatch = function() {
        var e = new Error();
        e.stack = "test stack";
        e.fileName = "TestFileName.js";
        e.lineNumber = 1;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("test stack", e.stack);
        AtlasUnit.Assert.areEqual("TestFileName.js", e.fileName);
        AtlasUnit.Assert.areEqual(1, e.lineNumber);
    }

    this.testPopStackFrameSingleFrameMatch = function() {
        var e = new Error();
        e.stack = "@TestFileName.js:1";
        e.fileName = "TestFileName.js";
        e.lineNumber = 1;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("@TestFileName.js:1", e.stack);
        AtlasUnit.Assert.areEqual("TestFileName.js", e.fileName);
        AtlasUnit.Assert.areEqual(1, e.lineNumber);
    }

    this.testPopStackFrameSecondFrameEmpty = function() {
        var e = new Error();
        e.stack = "@TestFileName.js:1\n";
        e.fileName = "TestFileName.js";
        e.lineNumber = 1;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("@TestFileName.js:1\n", e.stack);
        AtlasUnit.Assert.areEqual("TestFileName.js", e.fileName);
        AtlasUnit.Assert.areEqual(1, e.lineNumber);
    }

    this.testPopStackFrameSecondFrameInvalid = function() {
        var e = new Error();
        e.stack = "@TestFileName.js:1\nSecond Frame";
        e.fileName = "TestFileName.js";
        e.lineNumber = 1;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("@TestFileName.js:1\nSecond Frame", e.stack);
        AtlasUnit.Assert.areEqual("TestFileName.js", e.fileName);
        AtlasUnit.Assert.areEqual(1, e.lineNumber);
    }

    this.testPopStackFrameSecondFrameNoLineNumber = function() {
        var e = new Error();
        e.stack = "@TestFileName.js:1\n@SecondFileName.js:";
        e.fileName = "TestFileName.js";
        e.lineNumber = 1;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("@TestFileName.js:1\n@SecondFileName.js:", e.stack);
        AtlasUnit.Assert.areEqual("TestFileName.js", e.fileName);
        AtlasUnit.Assert.areEqual(1, e.lineNumber);
    }

    this.testPopStackFrameSecondFrameNoFileName = function() {
        var e = new Error();
        e.stack = "@TestFileName.js:1\n@:2";
        e.fileName = "TestFileName.js";
        e.lineNumber = 1;

        e.popStackFrame();

        AtlasUnit.Assert.areEqual("@:2", e.stack);
        AtlasUnit.Assert.areEqual("", e.fileName);
        AtlasUnit.Assert.areEqual(2, e.lineNumber);
    }

    this._testPopStackFrame = function(e, verifyLastStackFrame) {
        AtlasUnit.Assert.areEqual(12, e.lineNumber);
        var f = "http://localhost/AtlasUnit/AtlasScript/Test/ErrorTestHelper.js";
        AtlasUnit.Assert.areEqual(f, e.fileName.substring(0, f.length));
        var s = 'Error("test message")@:0\n()@http://localhost/AtlasUnit/AtlasScript/Test/ErrorTestHelper.js';
        AtlasUnit.Assert.areEqual(s, e.stack.substring(0, s.length));

        e.popStackFrame();

        AtlasUnit.Assert.areEqual(9, e.lineNumber);
        f = "http://localhost/AtlasUnit/AtlasScript/Test/ErrorTestHelper.js";
        AtlasUnit.Assert.areEqual(f, e.fileName.substring(0, f.length));
        s = "()@http://localhost/AtlasUnit/AtlasScript/Test/ErrorTestHelper.js";
        AtlasUnit.Assert.areEqual(s, e.stack.substring(0, s.length));

        e.popStackFrame();

        AtlasUnit.Assert.areEqual(12, e.lineNumber);
        f = "http://localhost/AtlasUnit/AtlasScript/Test/ErrorTest.js";
        AtlasUnit.Assert.areEqual(f, e.fileName.substring(0, f.length));
        s = "()@http://localhost/AtlasUnit/AtlasScript/Test/ErrorTest.js";
        AtlasUnit.Assert.areEqual(s, e.stack.substring(0, s.length));

        // Verify popStackFrame() terminates when we've reached the last stack frame
        var oldStack = null;
        while (oldStack != e.stack) {
            oldStack = e.stack;
            e.popStackFrame();
        }
        
        if (verifyLastStackFrame) {
            AtlasUnit.Assert.areEqual(0, e.lineNumber);
            AtlasUnit.Assert.areEqual("", e.fileName);
            AtlasUnit.Assert.areEqual("@:0\n", e.stack);
        }
    }

    this._verifyStackFrame = function(e) {
        // Check only applies on FireFox, where e.fileName is defined
        if (e.fileName) {
            AtlasUnit.Assert.areNotEqual(-1, e.fileName.indexOf("ErrorTest.js"), "Incorrect stack frame");
        }
    }

    this.testTypeName = function() {
        AtlasUnit.Assert.areEqual("Error", Object.getTypeName(new Error()));
    }

    this._testCreateHelper = function(message, errorInfo) {
        var e = Error.create.apply(null, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual(message, e.message);
        if (errorInfo) {
            for (var v in errorInfo) {
                AtlasUnit.Assert.areEqual(errorInfo[v], e[v]);
            }
        }
    }

    this.testCreate = function() {
        var testCases = [
            [],
            [undefined],
            [null],
            [""],
            ["TestErrorMessage"],

            // If message string can be converted to a number, IE sets e.message to the number, not the string.
            // We workaround this issue by explicitly setting e.message to the string.  This test verfies
            // that e.message is actually the string.
            ["1234"],

            ["TestErrorMessage", undefined],
            ["TestErrorMessage", null],
            ["TestErrorMessage", {}],
            ["TestErrorMessage", {a: 1, b: 2}]
        ];

        for (var i=0; i < testCases.length; i++) {
            this._testCreateHelper.apply(this, testCases[i]);
        }
    }

    this._testArgumentHelper = function(paramName, message) {
        var e = Error.argument.apply(null, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual("Sys.ArgumentException", e.name);
        AtlasUnit.Assert.areEqual(paramName, e.paramName);

        return e;
    }

    this.testArgument = function() {
        var testCases = [
            [[], "Sys.ArgumentException: Value does not fall within the expected range."],
            [[undefined], "Sys.ArgumentException: Value does not fall within the expected range."],
            [[null], "Sys.ArgumentException: Value does not fall within the expected range."],
            [[""], "Sys.ArgumentException: Value does not fall within the expected range."],
            [["param1"],
             "Sys.ArgumentException: Value does not fall within the expected range.\nParameter name: param1"],
            [["param1", undefined],
             "Sys.ArgumentException: Value does not fall within the expected range.\nParameter name: param1"],
            [["param1", null],
             "Sys.ArgumentException: Value does not fall within the expected range.\nParameter name: param1"],
            [["param1", ""],
             "Sys.ArgumentException: Value does not fall within the expected range.\nParameter name: param1"],
            [["param1", "TestErrorMessage"],
             "Sys.ArgumentException: TestErrorMessage\nParameter name: param1"]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testArgumentHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }

    this._testArgumentNullHelper = function(paramName, message) {
        var e = Error.argumentNull.apply(null, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual("Sys.ArgumentNullException", e.name);
        AtlasUnit.Assert.areEqual(paramName, e.paramName);

        return e;
    }

    this.testArgumentNull = function() {
        var testCases = [
            [[], "Sys.ArgumentNullException: Value cannot be null."],
            [[undefined], "Sys.ArgumentNullException: Value cannot be null."],
            [[null], "Sys.ArgumentNullException: Value cannot be null."],
            [[""], "Sys.ArgumentNullException: Value cannot be null."],
            [["param1"], "Sys.ArgumentNullException: Value cannot be null.\nParameter name: param1"],
            [["param1", undefined], "Sys.ArgumentNullException: Value cannot be null.\nParameter name: param1"],
            [["param1", null], "Sys.ArgumentNullException: Value cannot be null.\nParameter name: param1"],
            [["param1", ""], "Sys.ArgumentNullException: Value cannot be null.\nParameter name: param1"],
            [["param1", "TestErrorMessage"], "Sys.ArgumentNullException: TestErrorMessage\nParameter name: param1"]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testArgumentNullHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }

    this._testArgumentOutOfRangeHelper = function(paramName, actualValue, message) {
        var e = Error.argumentOutOfRange.apply(null, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual("Sys.ArgumentOutOfRangeException", e.name);
        AtlasUnit.Assert.areEqual(paramName, e.paramName);
        AtlasUnit.Assert.areEqual(actualValue, e.actualValue);

        return e;
    }

    this.testArgumentOutOfRange = function() {
        var testCases = [
            [[],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values."],
            [[undefined],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values."],
            [[null],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values."],
            [[""],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values."],
            [["param1"],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n" +
             "Parameter name: param1"],
            [["param1", undefined],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n" +
             "Parameter name: param1"],
            [["param1", null],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n" +
             "Parameter name: param1"],
            [["param1", -1],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n" +
             "Parameter name: param1\nActual value was -1."],
            [["param1", -1, undefined],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n" +
             "Parameter name: param1\nActual value was -1."],
            [["param1", -1, null],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n" +
             "Parameter name: param1\nActual value was -1."],
            [["param1", -1, ""],
             "Sys.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n" +
             "Parameter name: param1\nActual value was -1."],
            [["param1", -1, "TestMessage"],
             "Sys.ArgumentOutOfRangeException: TestMessage\n" +
             "Parameter name: param1\nActual value was -1."]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testArgumentOutOfRangeHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }

    this._testArgumentTypeHelper = function(paramName, actualType, expectedType, message) {
        var e = Error.argumentType.apply(this, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual('Sys.ArgumentTypeException', e.name);
        AtlasUnit.Assert.areEqual(paramName, e.paramName);
        AtlasUnit.Assert.areEqual(actualType, e.actualType);
        AtlasUnit.Assert.areEqual(expectedType, e.expectedType);

        return e;
    }

    this.testArgumentType = function() {
        var testCases = [
            [[], "Sys.ArgumentTypeException: Object cannot be converted to the required type."],
            [[undefined], "Sys.ArgumentTypeException: Object cannot be converted to the required type."],
            [[null], "Sys.ArgumentTypeException: Object cannot be converted to the required type."],
            [[""], "Sys.ArgumentTypeException: Object cannot be converted to the required type."],
            [["param1"],
             "Sys.ArgumentTypeException: Object cannot be converted to the required type.\n" +
             "Parameter name: param1"],
            [["param1", undefined],
             "Sys.ArgumentTypeException: Object cannot be converted to the required type.\n" +
             "Parameter name: param1"],
            [["param1", null],
             "Sys.ArgumentTypeException: Object cannot be converted to the required type.\n" +
             "Parameter name: param1"],
            [["param1", Number],
             "Sys.ArgumentTypeException: Object cannot be converted to the required type.\n" +
             "Parameter name: param1"],
            [["param1", Number, undefined],
             "Sys.ArgumentTypeException: Object cannot be converted to the required type.\n" +
             "Parameter name: param1"],
            [["param1", Number, null],
             "Sys.ArgumentTypeException: Object cannot be converted to the required type.\n" +
             "Parameter name: param1"],
            [["param1", Number, String],
             "Sys.ArgumentTypeException: Object of type 'Number' cannot be converted to type 'String'.\n" +
             "Parameter name: param1"],
            [["param1", Number, String, undefined],
             "Sys.ArgumentTypeException: Object of type 'Number' cannot be converted to type 'String'.\n" +
             "Parameter name: param1"],
            [["param1", Number, String, null],
             "Sys.ArgumentTypeException: Object of type 'Number' cannot be converted to type 'String'.\n" +
             "Parameter name: param1"],
            [["param1", Number, String, ""],
             "Sys.ArgumentTypeException: Object of type 'Number' cannot be converted to type 'String'.\n" +
             "Parameter name: param1"],
            [["param1", Number, String, "TestErrorMessage"],
             "Sys.ArgumentTypeException: TestErrorMessage\n" +
             "Parameter name: param1"]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testArgumentTypeHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }

    this._testArgumentUndefinedHelper = function(paramName, message) {
        var e = Error.argumentUndefined.apply(this, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual('Sys.ArgumentUndefinedException', e.name);
        AtlasUnit.Assert.areEqual(paramName, e.paramName);

        return e;
    }

    this.testArgumentUndefined = function() {
        var testCases = [
            [[], "Sys.ArgumentUndefinedException: Value cannot be undefined."],
            [[undefined], "Sys.ArgumentUndefinedException: Value cannot be undefined."],
            [[null], "Sys.ArgumentUndefinedException: Value cannot be undefined."],
            [[""], "Sys.ArgumentUndefinedException: Value cannot be undefined."],
            [["param1"], "Sys.ArgumentUndefinedException: Value cannot be undefined.\nParameter name: param1"],
            [["param1", undefined],
             "Sys.ArgumentUndefinedException: Value cannot be undefined.\nParameter name: param1"],
            [["param1", null],
             "Sys.ArgumentUndefinedException: Value cannot be undefined.\nParameter name: param1"],
            [["param1", ""],
             "Sys.ArgumentUndefinedException: Value cannot be undefined.\nParameter name: param1"],
            [["param1", "TestErrorMessage"],
             "Sys.ArgumentUndefinedException: TestErrorMessage\nParameter name: param1"]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testArgumentUndefinedHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }

    this._testInvalidOperationHelper = function(message) {
        var e = Error.invalidOperation.apply(this, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual('Sys.InvalidOperationException', e.name);

        return e;
    }

    this.testInvalidOperation = function() {
        var testCases = [
            [[],
             "Sys.InvalidOperationException: Operation is not valid due to the current state of the object."],
            [[undefined],
             "Sys.InvalidOperationException: Operation is not valid due to the current state of the object."],
            [[null],
             "Sys.InvalidOperationException: Operation is not valid due to the current state of the object."],
            [[""],
             "Sys.InvalidOperationException: Operation is not valid due to the current state of the object."],
            [["TestErrorMessage"],
             "Sys.InvalidOperationException: TestErrorMessage"]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testInvalidOperationHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }

    this._testFormatHelper = function(message) {
        var e = Error.format.apply(this, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual('Sys.FormatException', e.name);

        return e;
    }

    this.testFormat = function() {
        var testCases = [
            [[],
             "Sys.FormatException: One of the identified items was in an invalid format."],
            [[undefined],
             "Sys.FormatException: One of the identified items was in an invalid format."],
            [[null],
             "Sys.FormatException: One of the identified items was in an invalid format."],
            [[""],
             "Sys.FormatException: One of the identified items was in an invalid format."],
            [["TestErrorMessage"],
             "Sys.FormatException: TestErrorMessage"]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testFormatHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }

    this.testIsClass = function() {
        AtlasUnit.Assert.isTrue(Type.isClass(Error));
    }

    this._testNotImplementedHelper = function(message) {
        var e = Error.notImplemented.apply(this, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual('Sys.NotImplementedException', e.name);

        return e;
    }

    this.testNotImplemented = function() {
        var testCases = [
            [[], "Sys.NotImplementedException: The method or operation is not implemented."],
            [[undefined], "Sys.NotImplementedException: The method or operation is not implemented."],
            [[null], "Sys.NotImplementedException: The method or operation is not implemented."],
            [[""], "Sys.NotImplementedException: The method or operation is not implemented."],
            [["TestErrorMessage"], "Sys.NotImplementedException: TestErrorMessage"]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testNotImplementedHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }

    this._testParameterCountHelper = function(message) {
        var e = Error.parameterCount.apply(this, arguments);

        this._verifyStackFrame(e);
        AtlasUnit.Assert.areEqual('Sys.ParameterCountException', e.name);

        return e;
    }

    this.testParameterCount = function() {
        var testCases = [
            [[], "Sys.ParameterCountException: Parameter count mismatch."],
            [[undefined], "Sys.ParameterCountException: Parameter count mismatch."],
            [[null], "Sys.ParameterCountException: Parameter count mismatch."],
            [[""], "Sys.ParameterCountException: Parameter count mismatch."],
            [["TestErrorMessage"], "Sys.ParameterCountException: TestErrorMessage"]
        ];

        for (var i=0; i < testCases.length; i++) {
            var e = this._testParameterCountHelper.apply(this, testCases[i][0]);
            AtlasUnit.Assert.areEqual(testCases[i][1], e.message);
        }
    }
}
AtlasScript.Test.ErrorTest.registerClass("AtlasScript.Test.ErrorTest");
AtlasScript.Test.ErrorTest["AtlasUnit.IsTestFixture"] = true;

